}
f0 <- ceiling(f0)
return(c(C, f0))
}
ExtenProbFun <- function(z1, z2) {
x1 <- z1; x2 <- z2  # Sorted data
n1 <- sum(x1); n2 <- sum(x2)
D1 <- sum(x1 > 0); D2 <- sum(x2 > 0)
D12 <- sum(x1 > 0 & x2 > 0)
f11 <- sum(x1 == 1 & x2 == 1)
f22 <- sum(x1 == 2 & x2 == 2)
f1p <- sum(x1 == 1 & x2 >= 1)
fp1 <- sum(x1 >= 1 & x2 == 1)
f2p <- sum(x1 == 2 & x2 >= 1)
fp2 <- sum(x1 >= 1 & x2 == 2)
K1 <- (n1 - 1) / n1; K2 <- (n2 - 1) / n2
if (f2p == 0 || fp2 == 0 || f22 == 0) {
f0p <- ceiling(K1 * f1p * (f1p - 1) / 2 / (f2p + 1))
fp0 <- ceiling(K2 * fp1 * (fp1 - 1) / 2 / (fp2 + 1))
f00 <- ceiling(K1 * K2 * f11 * (f11 - 1) / 4 / (f22 + 1))
} else {
f0p <- ceiling(K1 * f1p^2 / 2 / f2p)
fp0 <- ceiling(K2 * fp1^2 / 2 / fp2 )
f00 <- ceiling(K1 * K2 * f11^2 / 4 / f22)
}
ga1 <- D1 - D12; ga2 <- D2 - D12
d1 <- min(f0p, ga2); d2 <- min(fp0, ga1)
## Community 1
tmp1 <- Cf0Fun(x1)
Chat1 <- tmp1[1] ; f0_1 <- tmp1[2]
more1 <- max(f0_1, (f00 + d1))
add1 <- max(f0_1 - f00 - d1, 0)
lambda1 <- (1 - Chat1) / sum(x1 / n1 * (1 - x1 / n1)^n1)
pi1 <- x1 / n1 * (1 - lambda1 * (1 - x1 /n1)^n1)
p0_1 <- (1 - Chat1) / more1
## Community 2
tmp2 <- Cf0Fun(x2)
Chat2 <- tmp2[1] ; f0_2 <- tmp2[2]
more2 <- max(f0_2, (f00 + d2))
add2 <- max(f0_2 - f00 - d2, 0)
lambda2 <- (1 - Chat2) / sum(x2 / n2 * (1 - x2 / n2)^n2)
pi2 <- x2 / n2 * (1 - lambda2 * (1 - x2 /n2)^n2)
p0_2 <- (1 - Chat2) / more2
## Extension probility for Community 1 and Community 2
prob1 <- c(pi1[pi1 > 0], rep(p0_1, d1), rep(0, (ga2-d1)), rep(p0_1, f00),
rep(p0_1, add1), rep(0, add2))
prob2 <- c(pi2[1:D12], rep(p0_2, d2), rep(0, (ga1-d2)),
pi2[(D12 + ga1 + 1):(D12 + ga1 + ga2)], rep(p0_2, f00), rep(0, add1),
rep(p0_2, add2))
out <- list(prob1=prob1, prob2=prob2)
return(out)
}
NewBootFun <- function(p1, p2, n1, n2, B, FunName) {
pi1 <- p1
pi2 <- p2
set.seed(123)
X1 <- rmultinom(B, n1, pi1)
set.seed(123)
X2 <- rmultinom(B, n2, pi2)
X <- rbind(X1, X2)
se <- sd(apply(X, 2, function(x) {
y1 <- x[1 : length(pi1)]
y2 <- x[(length(pi1) + 1) : (2 * length(pi1))]
FunName(y1, y2)
}), na.rm=T)
return(se)
}
CorrectBootstrapFun <- function(x1, x2, B, FunName) {
n1 <- sum(x1); n2 <- sum(x2)
z <- SortDataFun(x1, x2)
z1 <- z[, 1]
z2 <- z[, 2]
newprob <- ExtenProbFun(z1, z2)
p1 <- newprob$prob1
p2 <- newprob$prob2
nese <- NewBootFun(p1, p2, n1, n2, B, FunName)
return(nese)
}
###############
################  C++
S_ACE <- function(data, k){
n <- sum(data)
f <- function(i, data){length(data[which(data == i)])}
x <- data[which(data != 0)]
D_rare <- length(x[which(x <= k)])
n_rare <- sum(x[which(x <= k)])
if (n_rare != 0){
C_rare <- 1 - f(1, x)/n_rare
} else {
C_rare = 1
}
n_abun <- n - n_rare
D_abun <- length(x[which(x > k)])
j <- c(1:k)
a1 <- sum(sapply(j, function(j)j*(j - 1)*f(j, x)))
a2 <- sum(sapply(j, function(j)j*f(j, x)))
if (C_rare != 0){
gamma_rare_hat_square <- max(D_rare/C_rare*a1/a2/(a2 - 1) - 1, 0)
}else{
gamma_rare_hat_square <- 0
}
S_ace <- D_abun + D_rare/C_rare + f(1, x)/C_rare*gamma_rare_hat_square
return(S_ace)
}
CppBootsFun <- function(x1, x2, B, FunName) {
est <- Chao1_sharedEstFun(x1, x2)
est <- ceiling(est)
X <- cbind(x1, x2)
i <- 1:B
sd(sapply(i, function(i) {
D1 <- sum(x1 > 0)
D2 <- sum(x2 > 0)
D12 <- sum(x1 > 0 & x2 > 0)
obsS <- D1 + D2 - D12
S1 <- S_ACE(x1, k=10)
S2 <- S_ACE(x2, k=10)
disS <- S1 + S2 - est
disS <- ceiling(disS)
cut <- (x1 > 0 | x2 > 0)
X <- X[cut, ]
if (obsS < disS) {
zero <- matrix(rep(0, 2 * (disS - obsS)), ncol=2)
X <- rbind(X, zero)
pos <- sample(1:disS, replace=T)
} else {
pos <- sample(1:obsS, replace=T)
}
newX <- X[pos, ]
y1 <- newX[, 1]
y2 <- newX[, 2]
FunName(y1, y2)
}))
}
################
################ paper 2000
BootsSpeciesFun <- function(x1, x2, B, FunName) {
D12_rare <- sum(0 < x1  & x1 <= 10 & 0 < x2  & x2<= 10)
D12 <- sum(x1 > 0 & x2 > 0)
S12 <- ceiling(FunName(x1, x2))
D12_abun <- D12 - D12_rare
X <- cbind(x1, x2)
pos <- (x1 > 0 & x2 > 0)
if (S12 <= D12_abun) {
Y <- X[pos, ]
} else {
zero <- matrix(rep(0, 2 * (S12 - D12_abun)), ncol=2)
Y <- rbind(X[pos, ], zero)
}
i <- 1:B
sd(sapply(i, function(i) {
set.seed(i)
re <- sample(1:dim(Y)[1], replace=T)
W <- Y[re, ]
w1 <- W[, 1]
w2 <- W[, 2]
FunName(w1, w2)
}))
}
################
p1 <- x1 / sum(x1)
p2 <- x2 / sum(x2)
sum(x1)
sum(x2)
D1 <- sum(x1 > 0)
D1
D2 <- sum(x2 > 0)
D1
D2
N1 <- c(D1 / 2, D1, D1 * 2)
N1
N2 <- ceiling(c(D2 / 2, D2, D2 * 2))
D1 <- sum(x1 > 0)
D2 <- sum(x2 > 0)
N1 <- ceiling(c(D1 / 2, D1, D1 * 2))
N2 <- ceiling(c(D2 / 2, D2, D2 * 2))
output <- list()
for (j in 1:length(N1)) {
n1 <- N1[j]
n2 <- N2[j]
R <- 500
set.seed(123)
X1 <- rmultinom(R, size=n1, prob=p1)
X2 <- rmultinom(R, size=n2, prob=p2)
X <- rbind(X1, X2)
tmp <- apply(X, MARGIN=2, function(x) {
x1 <- x[1 : length(p1)]
x2 <- x[(length(p1)+1) : (2 * length(p1))]
matrix <- ChaoShared.Ind(x1, x2, B=50)[1:2, 1:2]
homoMa <- BootstrapFunMa(x1, x2, 50, HomoEstFun)
heteMa <- BootstrapFunMa(x1, x2, 50, HeteroEstFun)
#     homo <- CppBootsFun(x1, x2, 50, HomoEstFun)
#     hete <- CppBootsFun(x1, x2, 50, HeteroEstFun)
#     homo2 <- BootsSpeciesFun(x1, x2, 50, HomoEstFun)
#     hete2 <- BootsSpeciesFun(x1, x2, 50, HeteroEstFun)
return(c(matrix[, 1], matrix[, 2], homoMa, heteMa))
#     return(c(matrix[, 1], matrix[, 2], homoMa, heteMa, homo, hete, homo2, hete2))
})
nu <- 2
se <- apply(tmp[1:nu, ], MARGIN=1, sd)
avgsd <- apply(tmp[(nu + 1):(dim(tmp)[1]), ], MARGIN=1, mean)
out <- matrix(c(se, avgsd), ncol=2, byrow=T)
colnames(out) <- c("Homogeneous", "Heterogeneous")
rownames(out) <- c("Sample s.e", "Avg est s.e. by chen", "Avg est s.e. by Ma")
output[[j]] <- out
}
for (j in 1:length(N1)) {
write.csv(output[[j]], paste(N1[j], N2[j], "data2a_1 vs data2a_2.csv"))
}
View(tmp)
j <- 1
n1 <- N1[j]
n1
n2 <- N2[j]
R <- 200
set.seed(123)
X1 <- rmultinom(R, size=n1, prob=p1)
X2 <- rmultinom(R, size=n2, prob=p2)
X <- rbind(X1, X2)
tmp <- apply(X, MARGIN=2, function(x) {
x1 <- x[1 : length(p1)]
x2 <- x[(length(p1)+1) : (2 * length(p1))]
matrix <- ChaoShared.Ind(x1, x2, B=50)[1:2, 1:2]
homoMa <- BootstrapFunMa(x1, x2, 50, HomoEstFun)
heteMa <- BootstrapFunMa(x1, x2, 50, HeteroEstFun)
#     homo <- CppBootsFun(x1, x2, 50, HomoEstFun)
#     hete <- CppBootsFun(x1, x2, 50, HeteroEstFun)
#     homo2 <- BootsSpeciesFun(x1, x2, 50, HomoEstFun)
#     hete2 <- BootsSpeciesFun(x1, x2, 50, HeteroEstFun)
return(c(matrix[, 1], matrix[, 2], homoMa, heteMa))
#     return(c(matrix[, 1], matrix[, 2], homoMa, heteMa, homo, hete, homo2, hete2))
})
nu <- 2
se <- apply(tmp[1:nu, ], MARGIN=1, sd)
avgsd <- apply(tmp[(nu + 1):(dim(tmp)[1]), ], MARGIN=1, mean)
out <- matrix(c(se, avgsd), ncol=2, byrow=T)
out
j <- 1
n1 <- N1[j]
n2 <- N2[j]
R <- 500
set.seed(123)
X1 <- rmultinom(R, size=n1, prob=p1)
X2 <- rmultinom(R, size=n2, prob=p2)
X <- rbind(X1, X2)
tmp <- apply(X, MARGIN=2, function(x) {
x1 <- x[1 : length(p1)]
x2 <- x[(length(p1)+1) : (2 * length(p1))]
matrix <- ChaoShared.Ind(x1, x2, B=50)[1:2, 1:2]
homoMa <- BootstrapFunMa(x1, x2, 50, HomoEstFun)
heteMa <- BootstrapFunMa(x1, x2, 50, HeteroEstFun)
#     homo <- CppBootsFun(x1, x2, 50, HomoEstFun)
#     hete <- CppBootsFun(x1, x2, 50, HeteroEstFun)
#     homo2 <- BootsSpeciesFun(x1, x2, 50, HomoEstFun)
#     hete2 <- BootsSpeciesFun(x1, x2, 50, HeteroEstFun)
return(c(matrix[, 1], matrix[, 2], homoMa, heteMa))
#     return(c(matrix[, 1], matrix[, 2], homoMa, heteMa, homo, hete, homo2, hete2))
})
nu <- 2
se <- apply(tmp[1:nu, ], MARGIN=1, sd)
avgsd <- apply(tmp[(nu + 1):(dim(tmp)[1]), ], MARGIN=1, mean)
out <- matrix(c(se, avgsd), ncol=2, byrow=T)
out
i <- 1:R
sapply(i, function(i) {
HomoEstFun(X1[, i], X2[, i])
})
sd(sapply(i, function(i) {
HomoEstFun(X1[, i], X2[, i])
}))
X1
View(`X1`)
sapply(i, function(i) {
HomoEstFun(X1[, i], X2[, i])
})
X2[, 1]
j <- 2
j <- 3
n1 <- N1[j]
n2 <- N2[j]
R <- 500
set.seed(123)
X1 <- rmultinom(R, size=n1, prob=p1)
X2 <- rmultinom(R, size=n2, prob=p2)
X <- rbind(X1, X2)
i <- 1:R
sd(sapply(i, function(i) {
HomoEstFun(X1[, i], X2[, i])
}))
n1
n2
i <- 1:R
sd(sapply(i, function(i) {
HomoEstFun(X1[, i], X2[, i])
}))
HomoEstFun(x1, x2)
D1 <- sum(x1 > 0)
D2 <- sum(x2 > 0)
D12 <- sum(x1 > 0 & x2 > 0)
x1_share <- x1[which(x1 > 0 & x2 > 0)]
x2_share <- x2[which(x1 > 0 & x2 > 0)]
f11 <- sum(x1_share == 1 & x2_share == 1)
D12_rare <- sum(x1_share <= 10 & x2_share <= 10)
D12_rare
pos_r <- (x1_share <= 10 & x2_share <= 10)
pos1_r <- (x1_share == 1 & x2_share <= 10)
pos2_r <- (x2_share == 1 & x1_share <= 10)
tmp <- sum(x1_share[pos_r] * x2_share[pos_r])
if (tmp == 0)  # correct when number of Xi*Yi <= 10 equal to 0 by Y.H. Lee
tmp <- 1
C12_rare <- 1 - (sum(x2_share[pos1_r]) + sum(x1_share[pos2_r]) - f11) / tmp
if (C12_rare == 0 || C12_rare > 1)  # Correct when C12 = 0 or C12 > 1 !!! by c++
C12_rare <- 1
est <- D12 - D12_rare + D12_rare / C12_rare
D12 - D12_rare
C12_rare
tmp <- sum(x1_share[pos_r] * x2_share[pos_r])
tmp
pos_r <- (x1_share <= 10 & x2_share <= 10)
sum(pos_r)
pos_r <- (x1_share <= 10 & x2_share <= 10)
pos1_r <- (x1_share == 1 & x2_share <= 10)
pos2_r <- (x2_share == 1 & x1_share <= 10)
tmp <- sum(x1_share[pos_r] * x2_share[pos_r])
tmp
x1_share[pos_r]
x2_share[pos_r]
i <- 1:R
sd(sapply(i, function(i) {
HomoEstFun(X1[, i], X2[, i])
}))
j <- 1
n1 <- N1[j]
n2 <- N2[j]
R <- 500
set.seed(123)
X1 <- rmultinom(R, size=n1, prob=p1)
X2 <- rmultinom(R, size=n2, prob=p2)
X <- rbind(X1, X2)
i <- 1:R
sd(sapply(i, function(i) {
HomoEstFun(X1[, i], X2[, i])
}))
output <- list()
for (j in 1:length(N1)) {
n1 <- N1[j]
n2 <- N2[j]
R <- 150
set.seed(123)
X1 <- rmultinom(R, size=n1, prob=p1)
X2 <- rmultinom(R, size=n2, prob=p2)
X <- rbind(X1, X2)
tmp <- apply(X, MARGIN=2, function(x) {
x1 <- x[1 : length(p1)]
x2 <- x[(length(p1)+1) : (2 * length(p1))]
matrix <- ChaoShared.Ind(x1, x2, B=25)[1:2, 1:2]
homoMa <- BootstrapFunMa(x1, x2, 25, HomoEstFun)
heteMa <- BootstrapFunMa(x1, x2, 25, HeteroEstFun)
#     homo <- CppBootsFun(x1, x2, 50, HomoEstFun)
#     hete <- CppBootsFun(x1, x2, 50, HeteroEstFun)
#     homo2 <- BootsSpeciesFun(x1, x2, 50, HomoEstFun)
#     hete2 <- BootsSpeciesFun(x1, x2, 50, HeteroEstFun)
return(c(matrix[, 1], matrix[, 2], homoMa, heteMa))
#     return(c(matrix[, 1], matrix[, 2], homoMa, heteMa, homo, hete, homo2, hete2))
})
nu <- 2
se <- apply(tmp[1:nu, ], MARGIN=1, sd)
avgsd <- apply(tmp[(nu + 1):(dim(tmp)[1]), ], MARGIN=1, mean)
out <- matrix(c(se, avgsd), ncol=2, byrow=T)
colnames(out) <- c("Homogeneous", "Heterogeneous")
rownames(out) <- c("Sample s.e", "Avg est s.e. by chen", "Avg est s.e. by Ma")
output[[j]] <- out
}
output
data5a <- read.table("~/Dropbox/Anne Chao/Data/SPADE Data/Two-Community Similarity/Data5a.txt")
x1 <- data2a[, 1]
x2 <- data2a[, 3]
x1 <- data5a[, 1]
x2 <- data5a[, 3]
JaccardIncidenceEst <- function(x1, x2) {
D1 <- sum(x1 > 0)
D2 <- sum(x2 > 0)
D12 <- sum(x1 > 0 & x2 > 0)
est <- D12 / (D1 + D2 - D12)
return(est)
}
JaccardIncidenceFun <- function(x1, x2, B) {
est <- JaccardIncidenceEst(x1, x2)
se <- BootstrapFunMa(x1, x2, B, FunName=JaccardIncidenceEst)
out <- matrix(c(est, se), ncol=2)
colnames(out) <- c("Estimator", "Bootstrap s.e.")
rownames(out) <- c("Jaccard incidence")
return(out)
}
JaccardIncidenceFun(x1, x2, 50)
source('~/Dropbox/Anne Chao/2014:0103-0109 Shared_v4 correct Bootstap/shared_v3 boots.R')
JaccardIncidenceFun(x1, x2, 50)
data5a <- read.table("~/Dropbox/Anne Chao/Data/SPADE Data/Two-Community Similarity/Data5a.txt")
x1 <- data5a[, 1]
x2 <- data5a[, 3]
JaccardIncidenceFun(x1, x2, 50)
source('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
est <- HomoEstFun(x1, x2)
est
D12 <- sum(x1 > 0 & x2 > 0)
D12
t <- est - D12
z <- qnorm((1-conf)/2, lower.tail=F)
K <- exp(z * sqrt(log(1 + se^2 / t^2)))
conf <- 0,95
conf <- 0.95
t <- est - D12
z <- qnorm((1-conf)/2, lower.tail=F)
K <- exp(z * sqrt(log(1 + se^2 / t^2)))
se <- BootstrapFunMa(x1, x2, B=200, HomoEstFun)
K <- exp(z * sqrt(log(1 + se^2 / t^2)))
K
CI <- c(D12 + t / K, D12 + t * K)
CI
t <- 0.0000000000001
z <- qnorm((1-conf)/2, lower.tail=F)
K <- exp(z * sqrt(log(1 + se^2 / t^2)))
CI <- c(D12 + t / K, D12 + t * K)
CI
K
se
e10
10e^2
10e
10e10
e10
1e10
1e+10
1e+10 == 10
2e+10 == 20
2e+10
as.numeric(2e+10)
a <- 2e+10 == 20
a <- 2e+10
2E+10 == 20
2E == 20
2E+1 == 20
2E+10 == 2 * 10^10
1e-10 == 10^-10
10^-10
t <- 1e-10
K <- exp(z * sqrt(log(1 + se^2 / t^2)))
CI <- c(D12 + t / K, D12 + t * K)
CI
K
t <- 1e-20
z <- qnorm((1-conf)/2, lower.tail=F)
K <- exp(z * sqrt(log(1 + se^2 / t^2)))
CI <- c(D12 + t / K, D12 + t * K)
CI
source('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
ChaoShared(data2a, nboot=200)
source('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
ChaoShared(data2a, nboot=200)
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
source('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
ChaoShared(data2a, nboot=200)
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
source('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
debugSource('~/Dropbox/Anne Chao/2014:0110-0116 比較兩群落下光輝與怡姿拔靴方法/Shared_v4.R')
require('devtools')
install_github('ChaoEntropy','YuanHanLee')
require(ChaoEntropy)
install_github('ChaoEntropy','YuanHanLee')
require(ChaoEntropy)
load("/Users/mikelee/Documents/GitHub/ChaoShared/data/Birds2Estuaries.rda")
source('~/Dropbox/Anne Chao/2014:0117-0123 Shared Species pkg/Shared_v5.R')
ChaoShared(data2a, nboot=1)
a <- ChaoShared(data2a, nboot=1)
load("/Users/mikelee/Documents/GitHub/ChaoShared/data/BBR.rda")
load("/Users/mikelee/Documents/GitHub/ChaoShared/data/Birds2Estuaries.rda")
package.skeleton("ChaoShared")
package.skeleton("ChaoShared2")
load("/Users/mikelee/ChaoShared/data/Birds2Estuaries.rda")
ChaoShared(Birds2Estuaries, datatype="abundance", se=TRUE, nboot=200, conf=0.95)
data(Birds2Estuaries)
ChaoShared(Birds2Estuaries, datatype="abundance", se=TRUE, nboot=200, conf=0.95)
load("/Users/mikelee/ChaoShared/data/Birds2Estuaries.rda")
load("/Users/mikelee/ChaoShared/data/Birds2Estuaries.rda")
load("/Users/mikelee/ChaoShared/data/BBR.rda")
Birds2Estuaries <- data2a
BBR <- data2b
setwd("~/ChaoShared/data")
save(Birds2Estuaries, file="Birds2Estuaries.rda")
save(BBR, file="BBR.rda")
tools::showNonASCII( readLines("~/ChaoShared/BBR.Rda"))  :
tools::showNonASCII( readLines("~/ChaoShared/BBR.Rda"))
tools::showNonASCII( readLines("~/ChaoShared/BBR.Rd"))
tools::showNonASCII( readLines("~/ChaoShared/data/BBR.Rda"))
tools::showNonASCII( readLines("~/ChaoShared/data/BBR.Rd"))
a
tools::showNonASCII( readLines("~/ChaoShared/data/BBR.Rda"))
tools::showNonASCII( readLines("~/ChaoShared/man/BBR.Rd"))
tools::showNonASCII( readLines("~/ChaoShared/man/BBR.Rd"))
remove.packages("ChaoEntropy")
remove.packages("ChaoShared")
require('devtools')
